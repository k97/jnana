[
  {
      "_id": {
          "$oid": "594d8ac9d776420412047242"
      },
      "title": "v5 is live",
      "customUrlSlug": "v5-is-live",
      "displayDate": "2014-03-14",
      "type": "blog-post",
      "blurb": "It has been an exciting time for me to get my own web space setup from scratch. The previous versions of this website has been hosted on different 3rd party platforms, which left me little control on things.",
      "summary": "",
      "content": "Itâ€™s official and has been an exciting time for me to get my own web space. The previous versions of this website has been hosted on different 3rd party platforms, which left me little control on things. I have been thinking about a custom tech stack for a longtime and at last started to work on it. \n\nI sketched out few wireframes which I was planning for a long time (almost like an era ðŸ˜›) and then started to fiddle with high level designs. Apparently, when I was working on the design, I was very much impressed with the [BMW i8 concept](https://en.wikipedia.org/wiki/File:London_01_2013_BMW_Vision_Efficient_Dynamics_5684.jpg). More like, I was completely gravitated towards its futuristic design. Even though the production version of the i8 turned out to be a bit different, I wanted to extend those flexuous curves on the side of the car to my website as well. After a few interpretations, I sort of arrived at [this design](https://www.dropbox.com/s/mblg9lktnj30g4n/1-K97-Landing-Page.png?dl=0). I think I tried to do enough justice to the actual car's design but I understand this can be totally subjective.\n\nAnyway, I donâ€™t intend to post the design & development process here right now but I am planning to log a detailed note of it later. For now, letâ€™s keep it simple & ceremonial, the v5 of the www.k97.in is live. ðŸŽ‰\n",
      "published": true,
      "created": {
          "$date": "2017-06-23T21:40:25.740Z"
      },
      "tags": [],
      "__v": 0
  },

  {
      "_id": {
          "$oid": "594d8df6d776420412047249"
      },
      "title": "Requirement gathering",
      "customUrlSlug": "requirement-gathering",
      "displayDate": "2016-09-23",
      "type": "blog-post",
      "blurb": "The intricacies of requirement gathering using various tools in design & development of user interfaces.",
      "summary": "The intricacies of requirement gathering using various tools in design & development of user interfaces.",
      "content": "Recently, I have been working on an airline servicing application as UI developer in an agile team, the usual lot. Since this was a faily UI intensive application, there were a bunch of designers and developers. We worked closely critiqing each other's work, before and after the development. As any critiquing session would be, we too had to be objective in our observations and pass in feedback that is constructive for either of us to keep the work in a progressive path.\n\nAt times, this would become tricky, since critiquing a design was like threading a fine line which often trigger the designerâ€™s ego. This meant, we had to extra careful in making sure the feedback helps the designer rather than distract the entire process. I enjoyed doing it, since the designer side of me gets excited and usually this is where I get to exercise my design skills (at times, when I wanted to a mockup a flow or screen). Even though, there used to some noise sometimes around the visual elements and feasibility in terms of our existing component library and consistency or there lack of. I took this up as a challenge to pass any feedback only if the particular design doesnâ€™t solve the problem or if it doesnâ€™t work in terms of interaction. After a while, this process also got trickier, passionate designers usually find it difficult to move away from their initial solution. I know this because, I have experienced this and have also heard fellow designers share the same.\n\n***Iteration is a key part in evolving a design and getting back to drawing board to reinitiate the whole process again in a fairly big team like ours was often a nightmare in terms of cost and timelines.***\n\nDuring these crits, there was an interesting observation that drew my attention. Collecting requirements in wireframe as a natural habit. As trivial as it may sound, the process is quite intriguing. It maybe a personal preference for anyone, even I canâ€™t thoroughly deny doing it but I have not exercised it often to become a habit or preference. I say that because, my go-to tool for note taking in my workplace is Wunderlist (I have a huge number of lists going on and I would personally suggest it to anyone). Coming back to the topic, requirement gathering is an age-old task and people use tools like text editors or even a paper to do it. After giving it some thought, I realized how bad it is to gather requirements in wireframe.\n\n<figure>\n\t<img src=\"https://s19.postimg.org/d1mrxixv7/subtraction-reference.jpg\" alt=\"Deprecation Notice\">\n\t<figcaption>\n\t\tSurvey result: Primary tool for brainstorming and ideation. <i>Ref: <a href=\"http://tools.subtraction.com/brainstorming.html\" target=\"_blank\">subtraction.com</a></i>\n\t</figcaption>\n</figure>\n\nWireframes are usually a place to iterate before jumping into a high-fidelity mock. I have seen at times designers being reluctant to move away from their initial iteration, sometimes itâ€™s a complex scenario they are dealing which is difficult but other times, itâ€™s that initial wireframe which they used to collect requirement standing as a virtual roadblock. The mind tends to fall back to that wireframe whenever a requirement has to be processed and without the designer realizing it, he/she may tend to feed the same solution in most of their iterations. The resultant mockup usually looks close to the wireframe and by the time the designer takes up another iteration (which mostly is after the review process and if the design is flagged to be insufficient), it becomes very late in terms of delivery.\n\nNow looking at it retrospectively, setting up a process would help us address these problems. What if, the root cause remained undetected? That would mean, the consequence would never change. Itâ€™s difficult to detect a root cause like this one, since this remains in an elementary step which often is a personal preference and changing it may turn out to be difficult. This is the same case even for a developer, sticking to the initial pseudo code without thinking much about problem would lead to a recursive cycle of the same error or issue without arriving to a conclusion. By the time the developer realizes it, good amount of time would have been wasted already.\n\nWhen thinking about it, this is what I am opinionated to as of now, one has to take notes subjectively without thinking about the solution in any shape or form when doing it. Even if, a solution is to be recorded while gathering the requirement its absolutely necessary that, the person has to go the extra mile to find all the other possible ways of solving it, before iterating upon one solution. Also, I am going to take this up in my future conversations with the designers & developers and see how they feel about it.\n",
      "published": true,
      "created": {
          "$date": "2017-06-23T21:53:58.607Z"
      },
      "tags": [],
      "__v": 0
  },
  {
      "_id": {
          "$oid": "594d8f31d77642041204724b"
      },
      "title": "AngularJS Component & Routes",
      "customUrlSlug": "ng-component-routes",
      "displayDate": "2017-01-04",
      "type": "blog-post",
      "blurb": "Using the ui-router beta with ng 1.5.x component and porting the old routers to the new UI router.",
      "summary": "Using the ui-router beta with ng 1.5.x component and porting the old routers to the new UI router.",
      "content": "The intention of this post is to quickly log my experience with an angular 1.5+ based application. I have been working on several angular projects for quite sometime now, most of the projects were based on 1.x and handful were on ng2. Among the 1.x projects, there was a huge one which started on v1.3.x back in 2015. I joined this project in late 2016 for a new functional module. By this time, I had completed some work on ng2 project and from the experiences of it, I knew sooner or later we had to port the current app slowly towards component based approach. So, we planned out the framework upgrades incrementally and started rolling out them one by one. The initial upgrades were quite easy without much breaking changes and when we hit 1.5.0, we were excited to start using the component pattern.\n\nThe [AngularJS docs](https://docs.angularjs.org/guide/component) was a good place to start and the [blog](https://toddmotto.com/angular-1-5-lifecycle-hooks) [posts](https://toddmotto.com/exploring-the-angular-1-5-component-method/) from [Todd Motto](https://toddmotto.com/one-way-data-binding-in-angular-1-5/) were all really helpful in terms of dealing with the new patterns. We started off creating new components as widgets for the app, which is a form builder of sorts. This form consisted of many widgets, which were supposed to be reused and the obvious thing was to hit the component approach in full throttle. For the routing part, we looked at the angular's in-house router and it was already set for deprecation. The good thing was the docs pointed a reference to ui-routerâ€™s component version.\n\nThe ui-router's setup was slick since we were already using an old version of it. So when upgrading that we had to deal with few broken routes but it was worth it. The form builder module itself deserves a separate log, I will try to cover it later. If not, I will record it as a workflow/case-study in the new site that I'm working on. So, the route configuration looks like this:\n\n```javascript\n// ui-router 0.x\napp.state('users',{\n\turl: '/users',\n\ttemplateUrl: 'somefile.html',\n\tcontroller: 'userListController',\n\tcontrollerAs:'vm',\n\totherConfigs: {\n\t\t//3rd party integrations and promises\n\t}\n});\n\n\n// ui-router 1.0.3-beta\napp.state('users', {\n\turl: '/users',\n\tcomponent: 'userListComponent'\n});\n\n```\n\nUsing ui-router's component routes obviously addressed the concerns of tightly coupling the views with controllers and promote reusable pieces of code. Another big sigh of relief was passing the state via the router. Now thanks to the bindings of ng 1.5 component pattern, we can use and abuse property bindings, event lifecycle hooks and mostly importantly setup the codebase more favorable for a ng-upgrade towards ng2.\n\nAs a hot tip, one-way binding is pretty easy now with the component pattern and the new router. When creating any component with bindings, just make sure itâ€™s started with one-way binding. Most of the functionality can be achieved this way and if some edge case crops up, then we can revisit that particular property with other means. By using the component bindings, I was able to refactor the old functionality which existed earlier as two-way binding hell to a slick one-way data flow.\n\nThe next slick thing that was really easy to create and maintain was a dynamic widget creation as scope-isolated components. Long story short, the components were created from a configuration through an attribute directive and then compiled to a DOM element through `$compile` before injecting back to the app. Once added to the DOM, the element starts to run as an usual ng component. This basically, gave us the flexibility to create dynamic components and reuse the configuration across the app. The directive looks something like the below:\n\n```javascript\nfunction componentWrapperDirective($compile) {\n\treturn {\n\t\trestrict: 'A',\n\t\ttransclude: true,\n\t\tscope: {\n\t\t\tmaster: '=someAttribute'\n\t\t},\n\t\tlink: function (scope, element, attrs) {\n\t\t\tvar item = angular.copy(scope.master);\n\t\t\tif (item) {\n\t\t\t\tlet componentName = item.widgetName.toLowerCase(),\n\t\t\t\t\toverlayScope = scope.$new(true); // Isolated scope\n\t\t\t\toverlayScope.data = item;\n\t\t\t\tlet component = '<fb-' + componentName + ' widget-info=\"data\"></fb-' + componentName + '>';\n\t\t\t\telement.append($compile(component)(overlayScope));\n\t\t\t} else {\n\t\t\t\t//do something else\n\t\t\t}\n\t\t}\n\t};\n}\n```\n\t\nThe next planned activity is to fully modularize the app with ES6 modules before starting the ng-upgrade, which is planned down the line. But looking at the router set up and the lesser state dependency with other modules, I think the upgrade should be quite simple and straight forward.\n",
      "published": true,
      "created": {
          "$date": "2017-06-23T21:59:13.941Z"
      },
      "tags": [],
      "__v": 0
  },
  {
      "_id": {
          "$oid": "594d8b6dd776420412047243"
      },
      "title": "V5 Build Process",
      "customUrlSlug": "v5-build-process",
      "displayDate": "2014-03-15",
      "type": "blog-post",
      "blurb": "The wordpress blog, after a couple of years of being live, clocked few thousand odd visits and some of my friends were following it. I wanted to extend on the blog and wanted to add few pages to showcase the side projects that I was working at that time.",
      "summary": "The wordpress blog, after a couple of years of being live, clocked few thousand odd visits and some of my friends were following it. I wanted to extend on the blog and wanted to add few pages to showcase the side projects that I was working at that time.",
      "content": "I will explain the build process of my fifth revision of website straight away. The idea of version 5.0 came up when I wanted to move my WordPress blog to something personal. I sidetracked and had a little bit of an adventure with the now defunct www.sanerock.com. Even though sanerock project didn't work out the way we intended, it personally taught me some valuable lessons. And through the wordpress site I got around a little bit of blogging. The wordpress blog, after a couple of years of being live, clocked few thousand odd visits and some of my friends were following it. I wanted to extend on the blog and wanted to add few pages to showcase the side projects that I was working at that time.\n\n## The Design\nI started out by sketching few wireframes and then designed the pages. The pages came out good, so good in fact that I was thinking of using WebGL for conversion of certain elements. Then something came up, the BMW i8 Concept. The thought of visualizing that car in digital space became a sweet challenge. I took it up, overhauled my design to make it look and feel like i8. And at last was able to freeze the design to a certain level. Now came the tough part, planning on the tech stack. \n\n## The Ingredients\nChoosing the ingredients was the toughest part. What should I use and how much was feasible with the next to none budget I had for this work. I was looking to work on my Angular skills, so that was an obvious tick on the checklist and also wanted to keep jQuery off the radar but that came in later for some quick fixes when Jekyll was chosen for the blogging part. Also, selecting the blog engine was a tough ask. I wanted to go with a NodeJS based Angular blog with MongoDB as backend, which turned out to quite costly for hosting and also the timeframe certainly looked a bit bleak, as I was planning to take on MongoDB with as little time I had between my already packed schedule with my daytime work. So I dropped that plan and started to work on Jekyll, which became my blog engine solely for its Github pages.\n\n## The Process\nThis was quite simple as I've listed below:\n\n1. Wireframes to Template\n2. Code conversion of the design\n3. Fixing RWD & development bugs\n4. Push code for final build\n5. Maintain code.\n\nIt looked like a simple 5 point process but the work of converting it to code and supporting RWD were done for some prolonged duration. I had to pause the work on the site for some time due to my job transition and then regain pace after few weeks. Initially I had planned to finish it in 2 weeks but it took almost 4-5 weeks and then a relatively brief confusion on the domain names which again halted the domain procurement process. \n\n![V5's  Tech Stack](https://s19.postimg.org/qkyk645ir/v5-build.jpg)\n\n## The showdown\nAfter nearly getting annoyed by the slow progress, I had to put in some sleepless nights to fix some issues and live the site. The website looked good but the support for the major browser versions looked like another headache. Again it was time to work on some quick fixes. I had to stick with IE10+ version and latest versions of Chrome & FF for the time moment as the plan was alarmingly out of schedule. So I called off the legacy browser support and decided to go live.\n\n## D-Day\nIts March 14, the website was fixed up to a certain extent. I showcased the site to @Sasi and +Senthil and they gave me some positive feedback, yet there were changes that was needed to be done in few places. After that, a sweet mailer was prepped and the website was declared live with this small post.\n\n## Lessons Learnt\nDuring the entire process, I learnt a lot of things, like AngularJS & its integration. I planned to keep jQuery totally off the stack but I had to include it when I turned towards Jekyll. It was a wise choice but I can live with it since I reduced my implementation time.c I have shared my website as public repo in github, also itâ€™s been hosted from there. I have also planned to work on the optimization along with cross browser support sometime sooner. Lets see how things pan out from here.\n",
      "published": true,
      "created": {
          "$date": "2017-06-23T21:43:09.941Z"
      },
      "tags": [],
      "__v": 0
  }
]
