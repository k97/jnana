[
  {
      "_id": {
          "$oid": "594d8ac9d776420412047242"
      },
      "title": "v5 is live",
      "customUrlSlug": "v5-is-live",
      "displayDate": "2014-03-14",
      "type": "blog-post",
      "blurb": "It has been an exciting time for me to get my own web space setup from scratch. The previous versions of this website has been hosted on different 3rd party platforms, which left me little control on things.",
      "summary": "",
      "content": "It’s official and has been an exciting time for me to get my own web space. The previous versions of this website has been hosted on different 3rd party platforms, which left me little control on things. I have been thinking about a custom tech stack for a longtime and at last started to work on it. \n\nI sketched out few wireframes which I was planning for a long time (almost like an era 😛) and then started to fiddle with high level designs. Apparently, when I was working on the design, I was very much impressed with the [BMW i8 concept](https://en.wikipedia.org/wiki/File:London_01_2013_BMW_Vision_Efficient_Dynamics_5684.jpg). More like, I was completely gravitated towards its futuristic design. Even though the production version of the i8 turned out to be a bit different, I wanted to extend those flexuous curves on the side of the car to my website as well. After a few interpretations, I sort of arrived at [this design](https://www.dropbox.com/s/mblg9lktnj30g4n/1-K97-Landing-Page.png?dl=0). I think I tried to do enough justice to the actual car's design but I understand this can be totally subjective.\n\nAnyway, I don’t intend to post the design & development process here right now but I am planning to log a detailed note of it later. For now, let’s keep it simple & ceremonial, the v5 of the www.k97.in is live. 🎉\n",
      "published": true,
      "created": {
          "$date": "2017-06-23T21:40:25.740Z"
      },
      "tags": [],
      "__v": 0
  },
  {
      "_id": {
          "$oid": "594d8d04d776420412047247"
      },
      "title": "GatsbyJS blog engine",
      "customUrlSlug": "gatsbyjs-blog-engine",
      "displayDate": "2016-09-23",
      "type": "blog-post",
      "blurb": "After much procrastination, I have decided to take down my current site and replace it with a journal which is developed using GatsbyJS. This journal will be an intermediate space until the next version is complete.",
      "summary": "After much procrastination, I have decided to take down my current site and replace it with a journal which is developed using GatsbyJS. This journal will be an intermediate space until the next version is complete.",
      "content": "This space has been dormant for a while after the last iteration. It's mainly because I lost the development setup for the blog module and redoing the setup meant spending more time than I could manage. Even then, I tried couple of times to set things up, but midway through I had to drop it since it was messing with my mainstream project environment. It's a pain in the butt to do project setups on a workday and not to code or do something else interesting. Besides, the Ruby/Java environments are notorious for these kinda things. Also, I admit the fact that, v5 was done in a frivolous way. I didn't plan much of it in detail and maybe it was because of the rush to put the site out there. It's a shame that I couldn't do much about the blog setup cause I drafted few posts whenever I could find time and then couldn't really publish it. Some of those articles were interesting ones and few were written in the heat of the moment. Anyhow, I know what needs to be done and to make sure I do that, I‘m gonna record those things here.\n\nI was thinking about turning the blog module into a journal, so that I can drop my rough ideas and observations without having to polish them much (For some odd reason, blogging feels a bit more formal compared to journals). I put together this journal overnight using [GatsbyJS](https://github.com/gatsbyjs/gatsby), a static page generator which uses ReactJS/Markdown with other awesome things. Shout out to the [developers](https://github.com/gatsbyjs/gatsby/graphs/contributors) for this open source awesomeness. I was planning to develop something like this using ExpressJS and then incidentally found Gatsby which looked much better than what I intended to do anyway. By the time this journal is live, I would’ve taken down the  [the v5 site](https://www.dropbox.com/sh/x04025f5pl0cjww/AADzE4BMA9xyxZlAHZf010MJa?dl=0).\n\n### Audio Content\nI remember recording audio logs in the past and saving it offline. I started it as a habit during my college days to work on my language skills and that was the time when I didn't know much about podcasting or audio journals, so that meant I didn’t value it as much as I should have. I lost these logs when transitioning to Dubai. With so much in hand at that time, I couldn’t put any effort in finding them again. It's such a shame to lose those logs since I recorded them at different timelines of my life. I’d love to listen to them now, cause more than the quality of the content, its the context that would’ve been interesting. It's quite common to lose digital data every now and then, so rather than despairing about it, I’m thinking about publishing audio logs as journals once in a while in this space. The idea is to keep them rough, so I don't end up spending much time on it and that will keep the content flowing later in the days.\n\nAs a side note, this Gatsby powered journal will be an intermediate setup until I complete v6 of my site. One of the main reasons to do that, is gather content and reuse it later when v6 is live. So far, I haven’t spent much time on planning v6 but sometime later this week, I will drop another journal with all my hazy thoughts on it. The concepts are in a very primitive stage, so maybe its the right time to log them and start the work simultaneously.\n\nOn the whole, I'm really excited to see this space getting re-activated. 👍🏼\n",
      "published": true,
      "created": {
          "$date": "2017-06-23T21:49:56.114Z"
      },
      "tags": [],
      "__v": 0
  },
  {
      "_id": {
          "$oid": "594d8bdcd776420412047244"
      },
      "title": "NPM proxy setup",
      "customUrlSlug": "npm-proxy-setup",
      "displayDate": "2014-04-05",
      "type": "blog-post",
      "blurb": "Setting up NodeJS and running npm behind corporate proxy in a windows PC was really a pain in the neck when I tried it for the first time. This post will remain as a reference for future configs.",
      "summary": "Setting up NodeJS and running npm behind corporate proxy in a windows PC was really a pain in the neck when I tried it for the first time. This post will remain as a reference for future configs.",
      "content": "First of all, a massive thanks to everyone for their wishes and critics for my new weblog. I have taken all of it into account and planned to work on it gradually.\n\nLets get down to the topic, setting up NodeJS and running npm behind corporate proxy was really a pain in the neck when I tried it for the first time. After using YO and Grunt for app development in an open network, I was under the pretext that npm works flawlessly and if at all any problem arises it was just some missing environment variables (corporate machines are usually windows PCs). After joining my new workplace, I found out straight away that its frustrating to run npm with all the proxy setups and blocked admin rights. Also, I remember crashing the Node with my super buffoon ingenuity while trying to some related issues issues. Trying to recall, I don’t remember exactly what made it to crash but I just did. So I raised an admin ticket and they got it going back again.\n\nAnyway, after finishing my work at hand, I scheduled sometime for the setup and fixed the issues for good. Also, while trying to figure out the whole mess, Marten’s article on getting yeoman to work was quite useful. But I had my own issues other than what Marten had logged. So I thought of logging the whole flow here to make it easier for me and for others who might need it.\n\nFirst, get the NodeJS installed and also the git if it’s not available already. After installation, check whether they were installed properly using the commands:\n\n\n    node --version\n    v0.10.21 //Returns node version\n    \n    git --version\n    git version 1.8.4.msysgit.0 //Returns node version\n\nUsually, these commands return their respective version number. In Windows, git command may show some errors as invalid command or something. If that's the case, try setting the environment variable and it will work. An article on love2dev shows how to setup environment variables if it sounds unfamiliar.\n\n\n    Variable Name: PATH\n    Variable Value: C:\\Program Files\\nodejs\\;C:\\Program Files\\Git\\bin;C:\\Program Files\\Git\\cmd;\n\nNow, we have to configure the proxy settings. There are 3 ways to do that, either we can setup environment variables in Windows (or) we can pass certain commands through the cmd prompt. If configuring through cmd prompt feels all nerdy, we can directly follow the alternate method of configuring it through the NPMRC file.\n\nSetting up the proxy values through ENVIRONMENT VARIABLES:\n\n\n    Variable Name: HTTP_PROXY\n    Variable Value: http://proxy.company.com:8080\n    Variable Name: HTTPS_PROXY\n    Variable Value: https://proxy.company.com:8080\n\n\nIf that doesn't work as in my case like mine where I had some admin privileges blocked. Try these in the cmd prompt:\n\n\n    > npm config set proxy http://userNameHere:passwordHere@proxy.company.com:8080\n    > npm config set https-proxy http://userNameHere:passwordHere@123@proxy.company.com:8080\n\nAlternate Method\nAfter configuring all of this I figured out the third way of doing the above steps. To setup the the NPMRC file, which can be found under the USER location `(C:\\Users\\USERNAME\\.NPMRC)`.\n\n\n    strict-ssl = false\n    registry = http://registry.npmjs.org/\n    prefix = C:\\usr\\local\n    proxy = http://userNameHere:passwordHere@proxy.company.com:8080\n    https-proxy = http://userNameHere:passwordHere@proxy.company.com:8080\n\nMake sure npmregistry is properly setup. It can found in the NPMRC file setting above. Apart from these, we have to configure git to make it work seamlessly with bower. Usually git: protocol URLs are blocked in corporate environment and to overcome this we can use https: instead of git:. I found out while trying to figure all of this, that there is a similar file alike NPMRC under the same location as it for git `.gitconfig` and we can also save the configurations there.\n\n\n    git config --global url.\"https://\".insteadOf git://\n\nOnce all of this is done, the whole grunt-bower should work. But for reason related to blocked admin rights and folder access issue, it wasn’t working for me. I had to figure out where my local npm modules were stored. Usually this gets stored in the default location of the npm directory but I guess the folder rights issue(s) might have moved it to a different location. For instance, my local npm modules were stored under D: drive, so I setup an environment variable under `PATH` as `D:\\usr\\local` and this solved the grunt issue of command not recognized.\n\nApart from this, there was a fatal warning of Spawn ENOENT while trying to run grunt tasks. Fortunately StackOverflow had a solution for this. To setup the environment variable under PATH for `%SystemRoot%\\system32;` That did the trick and the warning stopped. At last everything seemed to work and I was able to run the npm & grunt tasks at peace. :)\n\nPS: I have been working on my npm-grunt boilerplate for quite some time and I have completed it. Will try to share through github ASAP. ",
      "published": true,
      "created": {
          "$date": "2017-06-23T21:45:00.068Z"
      },
      "tags": [],
      "__v": 0
  },
  {
      "_id": {
          "$oid": "594d8df6d776420412047249"
      },
      "title": "Requirement gathering",
      "customUrlSlug": "requirement-gathering",
      "displayDate": "2016-09-23",
      "type": "blog-post",
      "blurb": "The intricacies of requirement gathering using various tools in design & development of user interfaces.",
      "summary": "The intricacies of requirement gathering using various tools in design & development of user interfaces.",
      "content": "Recently, I have been working on an airline servicing application as UI developer in an agile team, the usual lot. Since this was a faily UI intensive application, there were a bunch of designers and developers. We worked closely critiqing each other's work, before and after the development. As any critiquing session would be, we too had to be objective in our observations and pass in feedback that is constructive for either of us to keep the work in a progressive path.\n\nAt times, this would become tricky, since critiquing a design was like threading a fine line which often trigger the designer’s ego. This meant, we had to extra careful in making sure the feedback helps the designer rather than distract the entire process. I enjoyed doing it, since the designer side of me gets excited and usually this is where I get to exercise my design skills (at times, when I wanted to a mockup a flow or screen). Even though, there used to some noise sometimes around the visual elements and feasibility in terms of our existing component library and consistency or there lack of. I took this up as a challenge to pass any feedback only if the particular design doesn’t solve the problem or if it doesn’t work in terms of interaction. After a while, this process also got trickier, passionate designers usually find it difficult to move away from their initial solution. I know this because, I have experienced this and have also heard fellow designers share the same.\n\n***Iteration is a key part in evolving a design and getting back to drawing board to reinitiate the whole process again in a fairly big team like ours was often a nightmare in terms of cost and timelines.***\n\nDuring these crits, there was an interesting observation that drew my attention. Collecting requirements in wireframe as a natural habit. As trivial as it may sound, the process is quite intriguing. It maybe a personal preference for anyone, even I can’t thoroughly deny doing it but I have not exercised it often to become a habit or preference. I say that because, my go-to tool for note taking in my workplace is Wunderlist (I have a huge number of lists going on and I would personally suggest it to anyone). Coming back to the topic, requirement gathering is an age-old task and people use tools like text editors or even a paper to do it. After giving it some thought, I realized how bad it is to gather requirements in wireframe.\n\n<figure>\n\t<img src=\"https://s19.postimg.org/d1mrxixv7/subtraction-reference.jpg\" alt=\"Deprecation Notice\">\n\t<figcaption>\n\t\tSurvey result: Primary tool for brainstorming and ideation. <i>Ref: <a href=\"http://tools.subtraction.com/brainstorming.html\" target=\"_blank\">subtraction.com</a></i>\n\t</figcaption>\n</figure>\n\nWireframes are usually a place to iterate before jumping into a high-fidelity mock. I have seen at times designers being reluctant to move away from their initial iteration, sometimes it’s a complex scenario they are dealing which is difficult but other times, it’s that initial wireframe which they used to collect requirement standing as a virtual roadblock. The mind tends to fall back to that wireframe whenever a requirement has to be processed and without the designer realizing it, he/she may tend to feed the same solution in most of their iterations. The resultant mockup usually looks close to the wireframe and by the time the designer takes up another iteration (which mostly is after the review process and if the design is flagged to be insufficient), it becomes very late in terms of delivery.\n\nNow looking at it retrospectively, setting up a process would help us address these problems. What if, the root cause remained undetected? That would mean, the consequence would never change. It’s difficult to detect a root cause like this one, since this remains in an elementary step which often is a personal preference and changing it may turn out to be difficult. This is the same case even for a developer, sticking to the initial pseudo code without thinking much about problem would lead to a recursive cycle of the same error or issue without arriving to a conclusion. By the time the developer realizes it, good amount of time would have been wasted already.\n\nWhen thinking about it, this is what I am opinionated to as of now, one has to take notes subjectively without thinking about the solution in any shape or form when doing it. Even if, a solution is to be recorded while gathering the requirement its absolutely necessary that, the person has to go the extra mile to find all the other possible ways of solving it, before iterating upon one solution. Also, I am going to take this up in my future conversations with the designers & developers and see how they feel about it.\n",
      "published": true,
      "created": {
          "$date": "2017-06-23T21:53:58.607Z"
      },
      "tags": [],
      "__v": 0
  },
  {
      "_id": {
          "$oid": "594d8f31d77642041204724b"
      },
      "title": "AngularJS Component & Routes",
      "customUrlSlug": "ng-component-routes",
      "displayDate": "2017-01-04",
      "type": "blog-post",
      "blurb": "Using the ui-router beta with ng 1.5.x component and porting the old routers to the new UI router.",
      "summary": "Using the ui-router beta with ng 1.5.x component and porting the old routers to the new UI router.",
      "content": "The intention of this post is to quickly log my experience with an angular 1.5+ based application. I have been working on several angular projects for quite sometime now, most of the projects were based on 1.x and handful were on ng2. Among the 1.x projects, there was a huge one which started on v1.3.x back in 2015. I joined this project in late 2016 for a new functional module. By this time, I had completed some work on ng2 project and from the experiences of it, I knew sooner or later we had to port the current app slowly towards component based approach. So, we planned out the framework upgrades incrementally and started rolling out them one by one. The initial upgrades were quite easy without much breaking changes and when we hit 1.5.0, we were excited to start using the component pattern.\n\nThe [AngularJS docs](https://docs.angularjs.org/guide/component) was a good place to start and the [blog](https://toddmotto.com/angular-1-5-lifecycle-hooks) [posts](https://toddmotto.com/exploring-the-angular-1-5-component-method/) from [Todd Motto](https://toddmotto.com/one-way-data-binding-in-angular-1-5/) were all really helpful in terms of dealing with the new patterns. We started off creating new components as widgets for the app, which is a form builder of sorts. This form consisted of many widgets, which were supposed to be reused and the obvious thing was to hit the component approach in full throttle. For the routing part, we looked at the angular's in-house router and it was already set for deprecation. The good thing was the docs pointed a reference to ui-router’s component version.\n\nThe ui-router's setup was slick since we were already using an old version of it. So when upgrading that we had to deal with few broken routes but it was worth it. The form builder module itself deserves a separate log, I will try to cover it later. If not, I will record it as a workflow/case-study in the new site that I'm working on. So, the route configuration looks like this:\n\n```javascript\n// ui-router 0.x\napp.state('users',{\n\turl: '/users',\n\ttemplateUrl: 'somefile.html',\n\tcontroller: 'userListController',\n\tcontrollerAs:'vm',\n\totherConfigs: {\n\t\t//3rd party integrations and promises\n\t}\n});\n\n\n// ui-router 1.0.3-beta\napp.state('users', {\n\turl: '/users',\n\tcomponent: 'userListComponent'\n});\n\n```\n\nUsing ui-router's component routes obviously addressed the concerns of tightly coupling the views with controllers and promote reusable pieces of code. Another big sigh of relief was passing the state via the router. Now thanks to the bindings of ng 1.5 component pattern, we can use and abuse property bindings, event lifecycle hooks and mostly importantly setup the codebase more favorable for a ng-upgrade towards ng2.\n\nAs a hot tip, one-way binding is pretty easy now with the component pattern and the new router. When creating any component with bindings, just make sure it’s started with one-way binding. Most of the functionality can be achieved this way and if some edge case crops up, then we can revisit that particular property with other means. By using the component bindings, I was able to refactor the old functionality which existed earlier as two-way binding hell to a slick one-way data flow.\n\nThe next slick thing that was really easy to create and maintain was a dynamic widget creation as scope-isolated components. Long story short, the components were created from a configuration through an attribute directive and then compiled to a DOM element through `$compile` before injecting back to the app. Once added to the DOM, the element starts to run as an usual ng component. This basically, gave us the flexibility to create dynamic components and reuse the configuration across the app. The directive looks something like the below:\n\n```javascript\nfunction componentWrapperDirective($compile) {\n\treturn {\n\t\trestrict: 'A',\n\t\ttransclude: true,\n\t\tscope: {\n\t\t\tmaster: '=someAttribute'\n\t\t},\n\t\tlink: function (scope, element, attrs) {\n\t\t\tvar item = angular.copy(scope.master);\n\t\t\tif (item) {\n\t\t\t\tlet componentName = item.widgetName.toLowerCase(),\n\t\t\t\t\toverlayScope = scope.$new(true); // Isolated scope\n\t\t\t\toverlayScope.data = item;\n\t\t\t\tlet component = '<fb-' + componentName + ' widget-info=\"data\"></fb-' + componentName + '>';\n\t\t\t\telement.append($compile(component)(overlayScope));\n\t\t\t} else {\n\t\t\t\t//do something else\n\t\t\t}\n\t\t}\n\t};\n}\n```\n\t\nThe next planned activity is to fully modularize the app with ES6 modules before starting the ng-upgrade, which is planned down the line. But looking at the router set up and the lesser state dependency with other modules, I think the upgrade should be quite simple and straight forward.\n",
      "published": true,
      "created": {
          "$date": "2017-06-23T21:59:13.941Z"
      },
      "tags": [],
      "__v": 0
  },
  {
      "_id": {
          "$oid": "594d8e71d77642041204724a"
      },
      "title": "The MERN stack",
      "customUrlSlug": "mern-stack",
      "displayDate": "2016-12-10",
      "type": "blog-post",
      "blurb": "I'm doing yet another iteration on my website. Unlike the previous versions, I want the next one to hold for a longer timespan. In the coming weeks, I will be logging the process here, so it can stay as a reference material.",
      "summary": "I'm doing yet another iteration on my website. Unlike the previous versions, I want the next one to hold for a longer timespan. In the coming weeks, I will be logging the process here, so it can stay as a reference material.",
      "content": "### Problem(s)\nThe last version had some teething problem in terms of logging data across the sections. Whenever I dealt with new content, either the setup was getting in the way or the templates. In hindsight, Angular and Jekyll setup didn't really workout and gh-pages wasn't ideal in maintaining the blog and the portfolio as separate entities. Apparently, I lost the setup for the blog and the re-setup was slightly tedious that I couldn't fire up the blog again. I want to avoid all this aggravation in the next version and keep the logging process simple.\n\n### Resolution\nThe content is going to be in Markdown, so that's sorted. Now, the choices are between compiling the markdown on the browser using a JS parser or generate a compiled markup during deployment and then serve it as static pages or as services. If I approach it with the latter choice, then the app might involve a back-end module using ExpressJS and to host it, either Heroku or Firebase can a good option.\n\n### Designs\nI've some wireframes sketched out and also designed few mockups to get a direction on the design elements. Upon completion of the mockups, it looked plenty enough for me to start the work. As far as iterations on the designs are concerned, usually I do it on the browser while coding and I want to follow the same approach for this one. The design elements are going to be sort kind of a chart, and the idea is to consume my [RescueTime](https://www.rescuetime.com/) data and display the analytics at a high level for the initial release. This will allow me to gather data from multiple devices and publish it to a single public interface.\n\n<figure>\n\t<img src=\"\thttps://s3-ap-southeast-2.amazonaws.com/k97static/journal/wireframes-homepage.jpg\" alt=\"Landing page wireframes\">\n\t<figcaption>Landing page wireframes</figcaption>\n</figure>\n\n<figure>\n\t<img src=\"https://s3-ap-southeast-2.amazonaws.com/k97static/journal/v6_landing_2.png\" alt=\"Landing page design mock\">\n\t<figcaption>Landing page design mock</figcaption>\n</figure>\n\nThe idea of habit and time-tracking tools were something that I wanted to develop for sometime. Meanwhile, when I was thinking about the various ways to approach this, Gyroscope was released. It's an app that consolidates all the user's data from multiple devices into a single interface. There are few other services which does this but I felt that Gyroscope is superior, mostly because of its beautiful design. I got inspired by the app and then it lead to a rough idea on how I can approach my site. To set things clear, I am gonna try hard enough not to copy anything intentionally from there, which by itself is a stern design challenge.\n\n### What's ahead?\nThe plan is to keep the portfolio and the blog section separate as similar to the old site. Only this time around, I've to be extra careful in managing the modules being independent. To achieve that, I'm planning to build the whole technical solution using a single framework. After using NG2 for an app at work, I was quite convinced with it and I've been working with AngularJS for quite sometime now, which has left me wondering on the other JS frameworks that are out there. I want to check things on Aurelia and ReactJS, which looked particularly interesting that on the others. Especially, the React ecosystem sounds more interesting and the added buzz makes it more appealing. I think its the right time to do this project as an experiment with the concepts of React.\n\nWith some much in the backlog and other projects taking majority of my time, its going to be tricky to manage time in the coming days. But I've wasted enough time postponing this work and I'm just excited to work with React.\n\n#### More designs\n<figure>\n\t<img src=\"\thttps://s3-ap-southeast-2.amazonaws.com/k97static/journal/wireframes-blogpost.jpg\" alt=\"Journal design wireframes\">\n\t<figcaption>Journal reference wireframes</figcaption>\n</figure>\n\n<figure style=\"margin-bottom: 50px;\">\n\t<img src=\"https://s3-ap-southeast-2.amazonaws.com/k97static/journal/v6_landing_1.png\" alt=\"Landing page design mock\">\n\t<figcaption>Another version of hero section</figcaption>\n</figure>\n",
      "published": true,
      "created": {
          "$date": "2017-06-23T21:56:01.033Z"
      },
      "tags": [],
      "__v": 0
  },
  {
      "_id": {
          "$oid": "594d8b6dd776420412047243"
      },
      "title": "V5 Build Process",
      "customUrlSlug": "v5-build-process",
      "displayDate": "2014-03-15",
      "type": "blog-post",
      "blurb": "The wordpress blog, after a couple of years of being live, clocked few thousand odd visits and some of my friends were following it. I wanted to extend on the blog and wanted to add few pages to showcase the side projects that I was working at that time.",
      "summary": "The wordpress blog, after a couple of years of being live, clocked few thousand odd visits and some of my friends were following it. I wanted to extend on the blog and wanted to add few pages to showcase the side projects that I was working at that time.",
      "content": "I will explain the build process of my fifth revision of website straight away. The idea of version 5.0 came up when I wanted to move my WordPress blog to something personal. I sidetracked and had a little bit of an adventure with the now defunct www.sanerock.com. Even though sanerock project didn't work out the way we intended, it personally taught me some valuable lessons. And through the wordpress site I got around a little bit of blogging. The wordpress blog, after a couple of years of being live, clocked few thousand odd visits and some of my friends were following it. I wanted to extend on the blog and wanted to add few pages to showcase the side projects that I was working at that time.\n\n## The Design\nI started out by sketching few wireframes and then designed the pages. The pages came out good, so good in fact that I was thinking of using WebGL for conversion of certain elements. Then something came up, the BMW i8 Concept. The thought of visualizing that car in digital space became a sweet challenge. I took it up, overhauled my design to make it look and feel like i8. And at last was able to freeze the design to a certain level. Now came the tough part, planning on the tech stack. \n\n## The Ingredients\nChoosing the ingredients was the toughest part. What should I use and how much was feasible with the next to none budget I had for this work. I was looking to work on my Angular skills, so that was an obvious tick on the checklist and also wanted to keep jQuery off the radar but that came in later for some quick fixes when Jekyll was chosen for the blogging part. Also, selecting the blog engine was a tough ask. I wanted to go with a NodeJS based Angular blog with MongoDB as backend, which turned out to quite costly for hosting and also the timeframe certainly looked a bit bleak, as I was planning to take on MongoDB with as little time I had between my already packed schedule with my daytime work. So I dropped that plan and started to work on Jekyll, which became my blog engine solely for its Github pages.\n\n## The Process\nThis was quite simple as I've listed below:\n\n1. Wireframes to Template\n2. Code conversion of the design\n3. Fixing RWD & development bugs\n4. Push code for final build\n5. Maintain code.\n\nIt looked like a simple 5 point process but the work of converting it to code and supporting RWD were done for some prolonged duration. I had to pause the work on the site for some time due to my job transition and then regain pace after few weeks. Initially I had planned to finish it in 2 weeks but it took almost 4-5 weeks and then a relatively brief confusion on the domain names which again halted the domain procurement process. \n\n![V5's  Tech Stack](https://s19.postimg.org/qkyk645ir/v5-build.jpg)\n\n## The showdown\nAfter nearly getting annoyed by the slow progress, I had to put in some sleepless nights to fix some issues and live the site. The website looked good but the support for the major browser versions looked like another headache. Again it was time to work on some quick fixes. I had to stick with IE10+ version and latest versions of Chrome & FF for the time moment as the plan was alarmingly out of schedule. So I called off the legacy browser support and decided to go live.\n\n## D-Day\nIts March 14, the website was fixed up to a certain extent. I showcased the site to @Sasi and +Senthil and they gave me some positive feedback, yet there were changes that was needed to be done in few places. After that, a sweet mailer was prepped and the website was declared live with this small post.\n\n## Lessons Learnt\nDuring the entire process, I learnt a lot of things, like AngularJS & its integration. I planned to keep jQuery totally off the stack but I had to include it when I turned towards Jekyll. It was a wise choice but I can live with it since I reduced my implementation time.c I have shared my website as public repo in github, also it’s been hosted from there. I have also planned to work on the optimization along with cross browser support sometime sooner. Lets see how things pan out from here.\n",
      "published": true,
      "created": {
          "$date": "2017-06-23T21:43:09.941Z"
      },
      "tags": [],
      "__v": 0
  },
  {
      "_id": {
          "$oid": "594d8c46d776420412047245"
      },
      "title": "Shell-Grunt Boilerplate",
      "customUrlSlug": "shell-grunt-boilerplate",
      "displayDate": "2014-05-05",
      "type": "blog-post",
      "blurb": "Shell contains all the basic things that are need to jumpstart a project without dealing with bootstrapping. I have forked the h5bp repo to make things easier for the app structure.",
      "summary": "Shell contains all the basic things that are need to jumpstart a project without dealing with bootstrapping. I have forked the [h5bp](http://html5boilerplate.com/) repo to make things easier for the app structure.",
      "content": "[NPM](https://www.npmjs.com/) is a powerful asset when it comes to managing dependencies and running tasks while working on app development. I have used [Yeoman](http://yeoman.io/) and pre-configured apps in the past which usually has the setups done and it was easier for me and my team to pull the code from the repos and get going without much fuss. After awhile, I wanted to setup my own configuration, a little something that can be used or referenced to jump start the whole setup process while beginning a new project.\n\nAfter procrastinating for a while, I managed to complete the task. It took me sometime to figure out the basics and set things right. To sum it up briefly on what I grasped, NPM module is coiled to NodeJS and the development dependencies are setup here by configuring the `package.json` file, like grunt configuration & its plugins. Then we have to setup the `gruntFile.js` to manage tasks for development, like automated conversion of LESS to CSS, etc. Apparently Bower is another module which is configured through `bower.json` to manage the actual application dependencies like jQuery & other vendor libraries. Also, it becomes easier if the development & application dependencies are managed separately. There is a great article by [Chris at 24ways](http://24ways.org/2013/grunt-is-not-weird-and-hard/), he explains everything in detail.\n\nAnyway, Shell contains all the basic things that are need to start a project. I have just pulled the [h5bp](http://html5boilerplate.com/) inside to make things easier. Also, while developing I tried out [ExpressJS](http://expressjs.com/) and found it to be extremely powerful, so I’m really looking forward to utilize its full potential in some other other app. I’m planning on extending the Shell boilerplate to make it more efficiency and dynamic, as the current one is just a startup template which intends to looks simple and self-explanatory for beginners like me. I am a LESS user, so I have included basic configuration for LESS files and tasks for LESS conversion. The entire setup files for development is available in [this github](https://github.com/k97/shell) repo for reference.\n",
      "published": true,
      "created": {
          "$date": "2017-06-23T21:46:46.524Z"
      },
      "tags": [],
      "__v": 0
  }
]
